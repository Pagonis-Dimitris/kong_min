version: "3.4"
services:
  api:
    build:
        context: ./api
    restart: always
    env_file: .env
    networks:
        - kong-net
  db:
    build:
      context: ./db      
    ports:
      - "${DB_PORT1}:${DB_PORT2}"
    volumes:
      - dbData:/var/lib/postgresql/data
    networks:
      - kong-net
    restart: always
    env_file: .env
  kong-migrations:
    image: kong:latest
    command: kong migrations bootstrap
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_PG_HOST: db
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
    networks:
      - kong-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
  # kong-migrations-up:
  #   image: kong:latest
  #   command: kong migrations up && kong migrations finish
  #   depends_on:
  #     - db
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_DATABASE: ${KONG_PG_DATABASE}
  #     KONG_PG_HOST: db
  #     KONG_PG_USER: ${KONG_PG_USER}
  #     KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
  #   networks:
  #     - kong-net
  #   restart: on-failure
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  kong:
    image: kong:latest
    user: "${KONG_USER}"
    depends_on:
      - db
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_CASSANDRA_CONTACT_POINTS: db
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_PG_HOST: db
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
    networks:
      - kong-net
    ports:
      # The following two environment variables default to an insecure value (0.0.0.0)
      # according to the CIS Security test.
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      # Making them mandatory but undefined, like so would be backwards-breaking:
      # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8000:8000/tcp"
      # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
      # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here

      - "127.0.0.1:8001:8001/tcp"
      - "127.0.0.1:8444:8444/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
    deploy:
      restart_policy:
        delay: 50s
        condition: on-failure
        max_attempts: 5
        window: 10s
      resources:
        limits:
          cpus: ${KONG_CPU_LIMIT:-2}
          memory: ${KONG_MEMORY_LIMIT:-2g}
    security_opt:
      - no-new-privileges
volumes:
  dbData:
    labels:
      persistent: "true"
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
networks:
  kong-net:
    external: false

